import {Bot, Context} from 'grammy';
import {MyContext} from '../types/context';
import {formatTimes, parseTimes, validateTimes} from '../utils/timeUtils';
import {createSchedule, deleteSchedule, getActiveSchedule, updateSchedule} from '../services/scheduleService';
import {registerCronTask, unregisterCronTasks} from '../scheduler/cronScheduler';
import {getBotInstance} from '../lib/bot';
import {isAdmin} from '../middleware/isAdmin';
import {createTemplate, deleteTemplate, getAllTemplates} from '../services/templateService';
import {config} from '../config';
import {
    createQuiz,
    deleteQuiz,
    deleteQuestion,
    getAllQuestionsFromQuiz,
    getAllQuizzes,
    getQuestionsByQuiz,
} from '../services/quizService';
import {createSession, deleteSession, getSession, hasActiveSession,} from '../services/quizSessionManager';
import {quizListMenu, adminMainMenu} from '../menus/quizMenus';
import {importQuizFromJson} from '../services/quizImportService';

export function registerCommands(bot: Bot<MyContext>) {
    bot.command('setreminder', handleSetReminder);
    bot.command('myreminders', handleMyReminders);
    bot.command('editreminder', handleEditReminder);
    bot.command('deletereminder', handleDeleteReminder);
    bot.command('help', handleHelp);
    bot.command('whoami', handleWhoami);

    bot.command('addreminder', isAdmin, handleAddReminder);
    bot.command('addreward', isAdmin, handleAddReward);
    bot.command('deletemessage', isAdmin, handleDeleteMessage);
    bot.command('listmessages', isAdmin, handleListMessages);
    bot.command('setstatus', isAdmin, handleSetStatus);
    bot.command('clearstatus', isAdmin, handleClearStatus);

    bot.command('createquiz', isAdmin, handleCreateQuiz);
    bot.command('listquizzes', handleListQuizzes);
    bot.command('deletequiz', isAdmin, handleDeleteQuiz);
    bot.command('addquestion', isAdmin, handleAddQuestion);
    bot.command('listquestions', isAdmin, handleListQuestions);
    bot.command('deletequestion', isAdmin, handleDeleteQuestion);
    bot.command('importquiz', isAdmin, handleImportQuizCommand);
    bot.on('message:document', handleImportQuizDocument);
    bot.command('startquiz', handleStartQuiz);
    bot.command('cancelquiz', handleCancelQuiz);
    bot.command('adminpanel', isAdmin, handleAdminPanel);
}

async function handleSetReminder(ctx: Context) {
    const telegramId = ctx.from?.id;
    const chatId = ctx.chat?.id;
    const input = ctx.match;

    if (!telegramId || !chatId) {
        return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ —á–∞—Ç–µ');
    }

    if (!input) {
        return ctx.reply(
            '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setreminder 09:00,14:00,21:00\n\n' +
            '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)'
        );
    }

    const times = parseTimes(input.toString());

    if (times.length === 0) {
        return ctx.reply('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –≤—Ä–µ–º—è');
    }

    const validation = validateTimes(times);

    if (!validation.valid) {
        return ctx.reply(
            `‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: ${validation.invalidTimes.join(', ')}\n\n` +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00, 14:30, 21:00)'
        );
    }

    try {
        const user = await ctx.api.getChat(telegramId);

        let dbUser = await ctx.api.getChat(telegramId).then(async () => {
            const {prisma} = await import('../lib/prisma');
            return prisma.user.findUnique({where: {telegramId: BigInt(telegramId)}});
        });

        if (!dbUser) {
            const {prisma} = await import('../lib/prisma');
            dbUser = await prisma.user.create({
                data: {
                    telegramId: BigInt(telegramId),
                    username: ctx.from?.username,
                    firstName: ctx.from?.first_name,
                    lastName: ctx.from?.last_name,
                    chatId: BigInt(chatId),
                },
            });
        }

        const schedule = await createSchedule(dbUser.id, BigInt(chatId), times);

        for (const time of times) {
            registerCronTask(getBotInstance(), schedule.id, dbUser.id, BigInt(chatId), time);
        }

        await ctx.reply(
            `‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n` +
            `‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${formatTimes(times)}\n\n` +
            `–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–µ —Ç–∞–±–ª–µ—Ç–æ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.`
        );
    } catch (error) {
        if (error instanceof Error && error.message.includes('—É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')) {
            return ctx.reply(
                '‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.\n\n' +
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /editreminder –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ /deletereminder –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.'
            );
        }
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    }
}

async function handleMyReminders(ctx: Context) {
    const telegramId = ctx.from?.id;
    const chatId = ctx.chat?.id;

    if (!telegramId || !chatId) {
        return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
    }

    try {
        const {prisma} = await import('../lib/prisma');
        const user = await prisma.user.findUnique({where: {telegramId: BigInt(telegramId)}});

        if (!user) {
            return ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setreminder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
        }

        const schedule = await getActiveSchedule(user.id, BigInt(chatId));

        if (!schedule) {
            return ctx.reply(
                'üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.\n\n' +
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setreminder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'
            );
        }

        await ctx.reply(
            `üìã –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n` +
            `‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${formatTimes(schedule.times)}\n` +
            `üìÖ –°–æ–∑–¥–∞–Ω–æ: ${schedule.createdAt.toLocaleString('ru-RU')}`
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    }
}

async function handleEditReminder(ctx: Context) {
    const telegramId = ctx.from?.id;
    const chatId = ctx.chat?.id;
    const input = ctx.match;

    if (!telegramId || !chatId) {
        return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
    }

    if (!input) {
        return ctx.reply(
            '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /editreminder 10:00,15:00,20:00\n\n' +
            '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'
        );
    }

    const times = parseTimes(input.toString());
    const validation = validateTimes(times);

    if (!validation.valid) {
        return ctx.reply(
            `‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: ${validation.invalidTimes.join(', ')}\n\n` +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM'
        );
    }

    try {
        const {prisma} = await import('../lib/prisma');
        const user = await prisma.user.findUnique({where: {telegramId: BigInt(telegramId)}});

        if (!user) {
            return ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setreminder');
        }

        const schedule = await getActiveSchedule(user.id, BigInt(chatId));

        if (!schedule) {
            return ctx.reply(
                '‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n\n' +
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setreminder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è'
            );
        }

        unregisterCronTasks(schedule.id);

        await updateSchedule(schedule.id, times);

        for (const time of times) {
            registerCronTask(getBotInstance(), schedule.id, user.id, BigInt(chatId), time);
        }

        await ctx.reply(
            `‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n` +
            `‚è∞ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${formatTimes(times)}`
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    }
}

async function handleDeleteReminder(ctx: Context) {
    const telegramId = ctx.from?.id;
    const chatId = ctx.chat?.id;

    if (!telegramId || !chatId) {
        return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
    }

    try {
        const {prisma} = await import('../lib/prisma');
        const user = await prisma.user.findUnique({where: {telegramId: BigInt(telegramId)}});

        if (!user) {
            return ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
        }

        const schedule = await getActiveSchedule(user.id, BigInt(chatId));

        if (!schedule) {
            return ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        }

        unregisterCronTasks(schedule.id);
        await deleteSchedule(schedule.id);

        await ctx.reply('‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    }
}

async function handleHelp(ctx: Context) {
    const telegramId = ctx.from?.id;
    const isAdminUser = telegramId && config.adminTelegramId && BigInt(telegramId) === config.adminTelegramId;

    let helpText = 'üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
        'üîπ /setreminder <–≤—Ä–µ–º—è> - –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n' +
        '   –ü—Ä–∏–º–µ—Ä: /setreminder 09:00,14:00,21:00\n\n' +
        'üîπ /myreminders - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n' +
        'üîπ /editreminder <–≤—Ä–µ–º—è> - –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n' +
        '   –ü—Ä–∏–º–µ—Ä: /editreminder 10:00,16:00\n\n' +
        'üîπ /deletereminder - –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n' +
        'üîπ /whoami - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –∏ ID\n\n' +
        'üîπ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n' +
        'üéØ –ö–≤–∏–∑-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞:\n\n' +
        'üîπ /listquizzes - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–∏–∑—ã\n' +
        'üîπ /startquiz <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ù–∞—á–∞—Ç—å –∫–≤–∏–∑\n' +
        '   –ü—Ä–∏–º–µ—Ä: /startquiz –ú–µ–¥–∏—Ü–∏–Ω–∞\n\n' +
        'üîπ /cancelquiz - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–≤–∏–∑\n\n' +
        'üí° –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: HH:MM (24-—á–∞—Å–æ–≤–æ–π)\n' +
        'üí° –ù–µ—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é';

    if (isAdminUser) {
        helpText += '\n\n' +
            'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
            'üî∏ /addreminder <—Ç–µ–∫—Å—Ç> - –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n' +
            '   –ü—Ä–∏–º–µ—Ä: /addreminder –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏!\n\n' +
            'üî∏ /addreward <—Ç–µ–∫—Å—Ç> - –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –Ω–∞–≥—Ä–∞–¥—ã\n' +
            '   –ü—Ä–∏–º–µ—Ä: /addreward –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!\n\n' +
            'üî∏ /deletemessage <id> - –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ ID\n' +
            '   –ü—Ä–∏–º–µ—Ä: /deletemessage abc-123-def\n\n' +
            'üî∏ /listmessages [type] - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã\n' +
            '   –ü—Ä–∏–º–µ—Ä: /listmessages reminder\n\n' +
            'üî∏ /setstatus <telegramId> <—Å—Ç–∞—Ç—É—Å> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n' +
            '   –ü—Ä–∏–º–µ—Ä: /setstatus 1248835061 –°–∞–º–∞—è –º–∏–ª–∞—è –∫–æ—à–µ—á–∫–∞ ‚ù§Ô∏è\n\n' +
            'üî∏ /clearstatus <telegramId> - –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' +
            '   –ü—Ä–∏–º–µ—Ä: /clearstatus 1248835061\n\n' +
            'üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∏–∑–∞–º–∏:\n\n' +
            'üî∏ /createquiz <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–≤–∏–∑\n' +
            '   –ü—Ä–∏–º–µ—Ä: /createquiz –ú–µ–¥–∏—Ü–∏–Ω–∞\n\n' +
            'üî∏ /deletequiz <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –£–¥–∞–ª–∏—Ç—å –∫–≤–∏–∑\n' +
            '   –ü—Ä–∏–º–µ—Ä: /deletequiz –ú–µ–¥–∏—Ü–∏–Ω–∞\n\n' +
            'üî∏ /addquestion <–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–≤–∏–∑–∞> - –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –∫–≤–∏–∑\n' +
            '   –ü—Ä–∏–º–µ—Ä: /addquestion –ú–µ–¥–∏—Ü–∏–Ω–∞\n\n' +
            'üî∏ /listquestions <–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–≤–∏–∑–∞> - –ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫–≤–∏–∑–∞\n' +
            '   –ü—Ä–∏–º–µ—Ä: /listquestions –ú–µ–¥–∏—Ü–∏–Ω–∞\n\n' +
            'üî∏ /deletequestion <id> - –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å\n' +
            '   –ü—Ä–∏–º–µ—Ä: /deletequestion abc-123-def';
    }

    await ctx.reply(helpText);
}

async function handleAddReminder(ctx: Context) {
    const input = ctx.match;

    if (!input || input.toString().trim().length === 0) {
        return ctx.reply(
            '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addreminder <—Ç–µ–∫—Å—Ç>\n\n' +
            '–ü—Ä–∏–º–µ—Ä: /addreminder –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏!'
        );
    }

    try {
        const template = await createTemplate('reminder', input.toString());
        await ctx.reply(
            `‚úÖ –®–∞–±–ª–æ–Ω –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω!\n\n` +
            `üÜî ID: ${template.id}\n` +
            `üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${template.content}`
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
        const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`);
    }
}

async function handleAddReward(ctx: Context) {
    const input = ctx.match;

    if (!input || input.toString().trim().length === 0) {
        return ctx.reply(
            '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addreward <—Ç–µ–∫—Å—Ç>\n\n' +
            '–ü—Ä–∏–º–µ—Ä: /addreward –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!'
        );
    }

    try {
        const template = await createTemplate('reward', input.toString());
        await ctx.reply(
            `‚úÖ –®–∞–±–ª–æ–Ω –Ω–∞–≥—Ä–∞–¥—ã —Å–æ–∑–¥–∞–Ω!\n\n` +
            `üÜî ID: ${template.id}\n` +
            `üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${template.content}`
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã:', error);
        const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`);
    }
}

async function handleDeleteMessage(ctx: Context) {
    const input = ctx.match;

    if (!input || input.toString().trim().length === 0) {
        return ctx.reply(
            '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deletemessage <id>\n\n' +
            '–ü—Ä–∏–º–µ—Ä: /deletemessage abc-123-def\n\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /listmessages –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ID —à–∞–±–ª–æ–Ω–æ–≤'
        );
    }

    try {
        const template = await deleteTemplate(input.toString().trim());
        await ctx.reply(
            `‚úÖ –®–∞–±–ª–æ–Ω —É–¥–∞–ª–µ–Ω!\n\n` +
            `üÜî ID: ${template.id}\n` +
            `üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${template.content}`
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞:', error);
        const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`);
    }
}

async function handleListMessages(ctx: Context) {
    const input = ctx.match?.toString().trim();
    let type: 'reminder' | 'reward' | undefined;

    if (input === 'reminder' || input === 'reward') {
        type = input;
    }

    try {
        const templates = await getAllTemplates(type);

        if (templates.length === 0) {
            return ctx.reply('üì≠ –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }

        const reminderTemplates = templates.filter(t => t.type === 'reminder');
        const rewardTemplates = templates.filter(t => t.type === 'reward');

        let message = 'üìã –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤:\n\n';

        if (reminderTemplates.length > 0) {
            message += '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n';
            reminderTemplates.forEach((t, index) => {
                const status = t.isActive ? '‚úÖ' : '‚ùå';
                const preview = t.content.length > 50 ? t.content.substring(0, 50) + '...' : t.content;
                message += `${index + 1}. ${status} ${preview}\n`;
                message += `   üÜî ${t.id}\n\n`;
            });
        }

        if (rewardTemplates.length > 0) {
            message += 'üéÅ –ù–∞–≥—Ä–∞–¥—ã:\n';
            rewardTemplates.forEach((t, index) => {
                const status = t.isActive ? '‚úÖ' : '‚ùå';
                const preview = t.content.length > 50 ? t.content.substring(0, 50) + '...' : t.content;
                message += `${index + 1}. ${status} ${preview}\n`;
                message += `   üÜî ${t.id}\n\n`;
            });
        }

        message += `\nüìä –í—Å–µ–≥–æ: ${templates.length} —à–∞–±–ª–æ–Ω–æ–≤`;

        await ctx.reply(message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤');
    }
}

async function handleWhoami(ctx: Context) {
    const telegramId = ctx.from?.id;

    if (!telegramId) {
        return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
    }

    try {
        const {prisma} = await import('../lib/prisma');
        const user = await prisma.user.findUnique({where: {telegramId: BigInt(telegramId)}});

        let message = `üë§ –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n`;
        message += `üÜî Telegram ID: ${telegramId}\n\n`;

        if (user?.customStatus) {
            message += `‚ú® –°—Ç–∞—Ç—É—Å: ${user.customStatus}\n\n`;
        } else if (!config.adminTelegramId) {
            message += '‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n';
            message += 'ADMIN_TELEGRAM_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏';
        } else if (BigInt(telegramId) === config.adminTelegramId) {
            message += 'üëë –°—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n';
        } else {
            message += 'üë§ –°—Ç–∞—Ç—É—Å: –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n\n';
        }

        if (config.adminTelegramId && BigInt(telegramId) === config.adminTelegramId) {
            message += '–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º:\n';
            message += '‚Ä¢ /addreminder - –¥–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n';
            message += '‚Ä¢ /addreward - –¥–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –Ω–∞–≥—Ä–∞–¥—ã\n';
            message += '‚Ä¢ /deletemessage - —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω\n';
            message += '‚Ä¢ /listmessages - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã\n';
            message += '‚Ä¢ /setstatus - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n';
            message += '‚Ä¢ /clearstatus - —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
        } else if (!user?.customStatus) {
            message += '–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.\n';
            message += '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.';
        }

        await ctx.reply(message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    }
}

async function handleSetStatus(ctx: Context) {
    const input = ctx.match?.toString().trim();

    if (!input) {
        return ctx.reply(
            '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setstatus <telegramId> <—Å—Ç–∞—Ç—É—Å>\n\n' +
            '–ü—Ä–∏–º–µ—Ä: /setstatus 1248835061 –°–∞–º–∞—è –º–∏–ª–∞—è –∫–æ—à–µ—á–∫–∞ ‚ù§Ô∏è'
        );
    }

    const parts = input.split(' ');
    if (parts.length < 2) {
        return ctx.reply(
            '‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ Telegram ID –∏ —Å—Ç–∞—Ç—É—Å\n\n' +
            '–ü—Ä–∏–º–µ—Ä: /setstatus 1248835061 –°–∞–º–∞—è –º–∏–ª–∞—è –∫–æ—à–µ—á–∫–∞ ‚ù§Ô∏è'
        );
    }

    const targetTelegramId = parts[0];
    const status = parts.slice(1).join(' ');

    if (!/^\d+$/.test(targetTelegramId)) {
        return ctx.reply('‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã');
    }

    try {
        const {prisma} = await import('../lib/prisma');
        const user = await prisma.user.findUnique({
            where: {telegramId: BigInt(targetTelegramId)}
        });

        if (!user) {
            return ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetTelegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }

        await prisma.user.update({
            where: {telegramId: BigInt(targetTelegramId)},
            data: {customStatus: status}
        });

        await ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetTelegramId}\n\nüìù –°—Ç–∞—Ç—É—Å: ${status}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞');
    }
}

async function handleClearStatus(ctx: Context) {
    const input = ctx.match?.toString().trim();

    if (!input) {
        return ctx.reply(
            '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /clearstatus <telegramId>\n\n' +
            '–ü—Ä–∏–º–µ—Ä: /clearstatus 1248835061'
        );
    }

    const targetTelegramId = input;

    if (!/^\d+$/.test(targetTelegramId)) {
        return ctx.reply('‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã');
    }

    try {
        const {prisma} = await import('../lib/prisma');
        const user = await prisma.user.findUnique({
            where: {telegramId: BigInt(targetTelegramId)}
        });

        if (!user) {
            return ctx.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetTelegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }

        if (!user.customStatus) {
            return ctx.reply(`‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetTelegramId} –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞`);
        }

        await prisma.user.update({
            where: {telegramId: BigInt(targetTelegramId)},
            data: {customStatus: null}
        });

        await ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetTelegramId}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
    }
}

async function handleCreateQuiz(ctx: MyContext) {
    await ctx.conversation.enter('createQuiz');
}

async function handleListQuizzes(ctx: MyContext) {
    const telegramId = ctx.from?.id;
    const isAdminUser = telegramId && config.adminTelegramId && BigInt(telegramId) === config.adminTelegramId;

    try {
        const quizzes = await getAllQuizzes(!isAdminUser);

        if (quizzes.length === 0) {
            return ctx.reply('üì≠ –ö–≤–∏–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }

        let message = 'üìã –°–ø–∏—Å–æ–∫ –∫–≤–∏–∑–æ–≤:\n\n';

        quizzes.forEach((quiz: {
            name: string;
            isActive: boolean;
            description?: string | null;
            _count: { questions: number }
        }, index: number) => {
            const status = isAdminUser ? (quiz.isActive ? '‚úÖ' : '‚ùå') : '';
            message += `${index + 1}. ${status} ${quiz.name}\n`;
            message += `   üìù –í–æ–ø—Ä–æ—Å–æ–≤: ${quiz._count.questions}\n`;
            if (quiz.description) {
                message += `   ‚ÑπÔ∏è ${quiz.description}\n`;
            }
            message += '\n';
        });

        message += `üìä –í—Å–µ–≥–æ: ${quizzes.length} –∫–≤–∏–∑–æ–≤`;

        await ctx.reply(message, {reply_markup: quizListMenu});
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–≤–∏–∑–æ–≤:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–≤–∏–∑–æ–≤');
    }
}

async function handleDeleteQuiz(ctx: Context) {
    const input = ctx.match?.toString().trim();

    if (!input) {
        return ctx.reply(
            '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deletequiz <–Ω–∞–∑–≤–∞–Ω–∏–µ>\n\n' +
            '–ü—Ä–∏–º–µ—Ä: /deletequiz –ú–µ–¥–∏—Ü–∏–Ω–∞'
        );
    }

    try {
        const {quiz, questionCount} = await deleteQuiz(input);
        await ctx.reply(
            `‚úÖ –ö–≤–∏–∑ '${quiz.name}' —É–¥–∞–ª–µ–Ω –≤–º–µ—Å—Ç–µ —Å ${questionCount} –≤–æ–ø—Ä–æ—Å–∞–º–∏`
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–≤–∏–∑–∞:', error);
        const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        await ctx.reply(`‚ùå ${errorMessage}`);
    }
}

async function handleAddQuestion(ctx: MyContext) {
    const quizName = ctx.match?.toString().trim();

    if (!quizName) {
        return ctx.reply(
            '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addquestion <–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–≤–∏–∑–∞>\n\n' +
            '–ü—Ä–∏–º–µ—Ä: /addquestion –ú–µ–¥–∏—Ü–∏–Ω–∞'
        );
    }

    if (!ctx.session) {
        ctx.session = {};
    }
    ctx.session.quizName = quizName;
    await ctx.conversation.enter('addQuestion');
}

async function handleAdminPanel(ctx: MyContext) {
    await ctx.reply('üéõ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', {reply_markup: adminMainMenu});
}

async function handleListQuestions(ctx: Context) {
    const input = ctx.match?.toString().trim();

    if (!input) {
        return ctx.reply(
            '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /listquestions <–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–≤–∏–∑–∞>\n\n' +
            '–ü—Ä–∏–º–µ—Ä: /listquestions –ú–µ–¥–∏—Ü–∏–Ω–∞'
        );
    }

    try {
        const questions = await getQuestionsByQuiz(input);

        if (questions.length === 0) {
            return ctx.reply(
                `üì≠ –í –∫–≤–∏–∑–µ '${input}' –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n` +
                `–î–æ–±–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é /addquestion ${input}`
            );
        }

        const maxToShow = 20;
        const questionsToShow = questions.slice(0, maxToShow);

        let message = `üìã –í–æ–ø—Ä–æ—Å—ã –∫–≤–∏–∑–∞ '${input}':\n\n`;

        questionsToShow.forEach((q: {
            id: string;
            questionText: string;
            options: Array<{ optionText: string; isCorrect: boolean }>
        }, index: number) => {
            message += `${index + 1}. ${q.questionText}\n`;
            message += `   üÜî ${q.id}\n`;
            q.options.forEach((opt: { optionText: string; isCorrect: boolean }, i: number) => {
                const marker = opt.isCorrect ? '‚úÖ' : '  ';
                message += `   ${marker} ${i + 1}) ${opt.optionText}\n`;
            });
            message += '\n';
        });

        if (questions.length > maxToShow) {
            message += `\nüìä –ü–æ–∫–∞–∑–∞–Ω–æ ${maxToShow} –∏–∑ ${questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤`;
        } else {
            message += `üìä –í—Å–µ–≥–æ: ${questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤`;
        }

        await ctx.reply(message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
        const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        await ctx.reply(`‚ùå ${errorMessage}`);
    }
}

async function handleDeleteQuestion(ctx: Context) {
    const input = ctx.match?.toString().trim();

    if (!input) {
        return ctx.reply(
            '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deletequestion <id>\n\n' +
            '–ü—Ä–∏–º–µ—Ä: /deletequestion abc-123-def\n\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /listquestions –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ID –≤–æ–ø—Ä–æ—Å–æ–≤'
        );
    }

    try {
        const question = await deleteQuestion(input);
        await ctx.reply(
            `‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω!\n\n` +
            `üìù ${question.questionText}`
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞:', error);
        const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        await ctx.reply(`‚ùå ${errorMessage}`);
    }
}

export async function startQuizWithQuestions(ctx: Context, quizName: string, questions: Array<{
    id: string;
    questionText: string
}>) {
    const telegramId = ctx.from?.id;
    const chatId = ctx.chat?.id;

    if (!telegramId || !chatId) {
        return;
    }

    const questionsData = questions.map(q => ({
        id: q.id,
        questionText: q.questionText,
        options: [] as Array<{ id: string; text: string; isCorrect: boolean }>,
    }));

    for (const qData of questionsData) {
        const {prisma} = await import('../lib/prisma');
        const options = await prisma.quizOption.findMany({
            where: {questionId: qData.id},
        });
        qData.options = options.map((opt: { id: string; optionText: string; isCorrect: boolean }) => ({
            id: opt.id,
            text: opt.optionText,
            isCorrect: opt.isCorrect,
        }));
    }

    createSession({
        userId: BigInt(telegramId),
        chatId: BigInt(chatId),
        quizName,
        questions: questionsData,
        currentIndex: 0,
        correctCount: 0,
        incorrectCount: 0,
        answers: [],
    });

    await sendQuizQuestion(ctx, BigInt(telegramId), BigInt(chatId));
}

async function handleStartQuiz(ctx: Context) {
    const telegramId = ctx.from?.id;
    const chatId = ctx.chat?.id;
    const input = ctx.match?.toString().trim();

    if (!telegramId || !chatId) {
        return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
    }

    if (!input) {
        return ctx.reply(
            '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /startquiz <–Ω–∞–∑–≤–∞–Ω–∏–µ>\n\n' +
            '–ü—Ä–∏–º–µ—Ä: /startquiz –ú–µ–¥–∏—Ü–∏–Ω–∞\n\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /listquizzes –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–∏–∑–æ–≤'
        );
    }

    if (hasActiveSession(BigInt(telegramId), BigInt(chatId))) {
        return ctx.reply(
            '‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–∏–∑.\n\n' +
            '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancelquiz'
        );
    }

    try {
        const questions = await getAllQuestionsFromQuiz(input);

        if (questions.length === 0) {
            return ctx.reply(`‚ùå –ö–≤–∏–∑ '${input}' –ø–æ–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤`);
        }

        createSession({
            userId: BigInt(telegramId),
            chatId: BigInt(chatId),
            quizName: input,
            questions,
            currentIndex: 0,
            correctCount: 0,
            incorrectCount: 0,
            answers: [],
        });

        await sendQuizQuestion(ctx, BigInt(telegramId), BigInt(chatId));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–≤–∏–∑–∞:', error);
        const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        await ctx.reply(`‚ùå ${errorMessage}`);
    }
}

async function sendQuizQuestion(ctx: Context, userId: bigint, chatId: bigint) {
    const session = getSession(userId, chatId);

    if (!session) {
        return;
    }

    const question = session.questions[session.currentIndex];
    const questionNumber = session.currentIndex + 1;
    const totalQuestions = session.questions.length;

    const keyboard = {
        inline_keyboard: question.options.map((opt, index) => [{
            text: opt.text,
            callback_data: `qa:${userId}_${chatId}:${index}`,
        }]),
    };

    await ctx.reply(
        `üìù –í–æ–ø—Ä–æ—Å ${questionNumber}/${totalQuestions}\n\n` +
        `${question.questionText}`,
        {reply_markup: keyboard}
    );
}

async function handleCancelQuiz(ctx: Context) {
    const telegramId = ctx.from?.id;
    const chatId = ctx.chat?.id;

    if (!telegramId || !chatId) {
        return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
    }

    if (!hasActiveSession(BigInt(telegramId), BigInt(chatId))) {
        return ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–≤–∏–∑–∞');
    }

    deleteSession(BigInt(telegramId), BigInt(chatId));
    await ctx.reply('‚ùå –ö–≤–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Å –ø–æ–º–æ—â—å—é /startquiz');
}

const waitingForQuizImport = new Set<number>();

async function handleImportQuizCommand(ctx: Context) {
    const telegramId = ctx.from?.id;

    if (!telegramId) {
        return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
    }

    waitingForQuizImport.add(telegramId);

    await ctx.reply(
        'üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Ñ–∞–π–ª —Å –∫–≤–∏–∑–æ–º\n\n' +
        '–§–æ—Ä–º–∞—Ç:\n' +
        '```json\n' +
        '{\n' +
        '  "—Ç–µ—Å—Ç": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞",\n' +
        '  "–≤–æ–ø—Ä–æ—Å—ã": [\n' +
        '    {\n' +
        '      "–≤–æ–ø—Ä–æ—Å": "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",\n' +
        '      "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–≤–µ—Ç–æ–≤": 4,\n' +
        '      "–æ—Ç–≤–µ—Ç—ã": ["–í–∞—Ä–∏–∞–Ω—Ç 1", "–í–∞—Ä–∏–∞–Ω—Ç 2", "–í–∞—Ä–∏–∞–Ω—Ç 3", "–í–∞—Ä–∏–∞–Ω—Ç 4"],\n' +
        '      "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π_–æ—Ç–≤–µ—Ç": "–í–∞—Ä–∏–∞–Ω—Ç 2"\n' +
        '    }\n' +
        '  ]\n' +
        '}\n' +
        '```',
        { parse_mode: 'Markdown' }
    );
}

async function handleImportQuizDocument(ctx: Context) {
    const telegramId = ctx.from?.id;

    if (!telegramId || !waitingForQuizImport.has(telegramId)) {
        return;
    }

    waitingForQuizImport.delete(telegramId);

    const document = ctx.message?.document;
    
    if (!document) {
        return ctx.reply('‚ùå –§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω');
    }

    if (!document.file_name?.endsWith('.json')) {
        return ctx.reply('‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON');
    }

    try {
        const file = await ctx.api.getFile(document.file_id);
        const fileUrl = `https://api.telegram.org/file/bot${config.botToken}/${file.file_path}`;
        
        const response = await fetch(fileUrl);
        const jsonText = await response.text();
        const jsonData = JSON.parse(jsonText);

        console.log('Parsed JSON data:', JSON.stringify(jsonData, null, 2));

        const result = await importQuizFromJson(jsonData, BigInt(telegramId));

        await ctx.reply(
            `‚úÖ –ö–≤–∏–∑ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!\n\n` +
            `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${result.quizName}\n` +
            `üìä –í–æ–ø—Ä–æ—Å–æ–≤: ${result.questionsCount}\n\n` +
            `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /startquiz ${result.quizName} –¥–ª—è –∑–∞–ø—É—Å–∫–∞`
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∫–≤–∏–∑–∞:', error);
        const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: ${errorMessage}`);
    }
}
