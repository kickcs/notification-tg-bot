import {Bot, Context} from 'grammy';
import {formatTimes, parseTimes, validateTimes} from '../utils/timeUtils';
import {createSchedule, deleteSchedule, getActiveSchedule, updateSchedule} from '../services/scheduleService';
import {registerCronTask, unregisterCronTasks} from '../scheduler/cronScheduler';
import {getBotInstance} from '../lib/bot';

export function registerCommands(bot: Bot) {
    bot.command('setreminder', handleSetReminder);
    bot.command('myreminders', handleMyReminders);
    bot.command('editreminder', handleEditReminder);
    bot.command('deletereminder', handleDeleteReminder);
    bot.command('help', handleHelp);
}

async function handleSetReminder(ctx: Context) {
    const telegramId = ctx.from?.id;
    const chatId = ctx.chat?.id;
    const input = ctx.match;

    if (!telegramId || !chatId) {
        return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ —á–∞—Ç–µ');
    }

    if (!input) {
        return ctx.reply(
            '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setreminder 09:00,14:00,21:00\n\n' +
            '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)'
        );
    }

    const times = parseTimes(input.toString());

    if (times.length === 0) {
        return ctx.reply('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –≤—Ä–µ–º—è');
    }

    const validation = validateTimes(times);

    if (!validation.valid) {
        return ctx.reply(
            `‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: ${validation.invalidTimes.join(', ')}\n\n` +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00, 14:30, 21:00)'
        );
    }

    try {
        const user = await ctx.api.getChat(telegramId);

        let dbUser = await ctx.api.getChat(telegramId).then(async () => {
            const {prisma} = await import('../lib/prisma');
            return prisma.user.findUnique({where: {telegramId: BigInt(telegramId)}});
        });

        if (!dbUser) {
            const {prisma} = await import('../lib/prisma');
            dbUser = await prisma.user.create({
                data: {
                    telegramId: BigInt(telegramId),
                    username: ctx.from?.username,
                    firstName: ctx.from?.first_name,
                    lastName: ctx.from?.last_name,
                    chatId: BigInt(chatId),
                },
            });
        }

        const schedule = await createSchedule(dbUser.id, BigInt(chatId), times);

        for (const time of times) {
            registerCronTask(getBotInstance(), schedule.id, dbUser.id, BigInt(chatId), time);
        }

        await ctx.reply(
            `‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n` +
            `‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${formatTimes(times)}\n\n` +
            `–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–µ —Ç–∞–±–ª–µ—Ç–æ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.`
        );
    } catch (error) {
        if (error instanceof Error && error.message.includes('—É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')) {
            return ctx.reply(
                '‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.\n\n' +
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /editreminder –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ /deletereminder –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.'
            );
        }
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    }
}

async function handleMyReminders(ctx: Context) {
    const telegramId = ctx.from?.id;
    const chatId = ctx.chat?.id;

    if (!telegramId || !chatId) {
        return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
    }

    try {
        const {prisma} = await import('../lib/prisma');
        const user = await prisma.user.findUnique({where: {telegramId: BigInt(telegramId)}});

        if (!user) {
            return ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setreminder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
        }

        const schedule = await getActiveSchedule(user.id, BigInt(chatId));

        if (!schedule) {
            return ctx.reply(
                'üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.\n\n' +
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setreminder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'
            );
        }

        await ctx.reply(
            `üìã –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n` +
            `‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${formatTimes(schedule.times)}\n` +
            `üìÖ –°–æ–∑–¥–∞–Ω–æ: ${schedule.createdAt.toLocaleString('ru-RU')}`
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    }
}

async function handleEditReminder(ctx: Context) {
    const telegramId = ctx.from?.id;
    const chatId = ctx.chat?.id;
    const input = ctx.match;

    if (!telegramId || !chatId) {
        return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
    }

    if (!input) {
        return ctx.reply(
            '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /editreminder 10:00,15:00,20:00\n\n' +
            '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'
        );
    }

    const times = parseTimes(input.toString());
    const validation = validateTimes(times);

    if (!validation.valid) {
        return ctx.reply(
            `‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: ${validation.invalidTimes.join(', ')}\n\n` +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM'
        );
    }

    try {
        const {prisma} = await import('../lib/prisma');
        const user = await prisma.user.findUnique({where: {telegramId: BigInt(telegramId)}});

        if (!user) {
            return ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setreminder');
        }

        const schedule = await getActiveSchedule(user.id, BigInt(chatId));

        if (!schedule) {
            return ctx.reply(
                '‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n\n' +
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setreminder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è'
            );
        }

        unregisterCronTasks(schedule.id);

        await updateSchedule(schedule.id, times);

        for (const time of times) {
            registerCronTask(getBotInstance(), schedule.id, user.id, BigInt(chatId), time);
        }

        await ctx.reply(
            `‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n` +
            `‚è∞ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${formatTimes(times)}`
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    }
}

async function handleDeleteReminder(ctx: Context) {
    const telegramId = ctx.from?.id;
    const chatId = ctx.chat?.id;

    if (!telegramId || !chatId) {
        return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
    }

    try {
        const {prisma} = await import('../lib/prisma');
        const user = await prisma.user.findUnique({where: {telegramId: BigInt(telegramId)}});

        if (!user) {
            return ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
        }

        const schedule = await getActiveSchedule(user.id, BigInt(chatId));

        if (!schedule) {
            return ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        }

        unregisterCronTasks(schedule.id);
        await deleteSchedule(schedule.id);

        await ctx.reply('‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    }
}

async function handleHelp(ctx: Context) {
    await ctx.reply(
        'üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
        'üîπ /setreminder <–≤—Ä–µ–º—è> - –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n' +
        '   –ü—Ä–∏–º–µ—Ä: /setreminder 09:00,14:00,21:00\n\n' +
        'üîπ /myreminders - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n' +
        'üîπ /editreminder <–≤—Ä–µ–º—è> - –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n' +
        '   –ü—Ä–∏–º–µ—Ä: /editreminder 10:00,16:00\n\n' +
        'üîπ /deletereminder - –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n' +
        'üîπ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n' +
        'üí° –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: HH:MM (24-—á–∞—Å–æ–≤–æ–π)\n' +
        'üí° –ù–µ—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'
    );
}
