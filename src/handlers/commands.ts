import {Bot, Context} from 'grammy';
import {formatTimes, parseTimes, validateTimes} from '../utils/timeUtils';
import {createSchedule, deleteSchedule, getActiveSchedule, updateSchedule} from '../services/scheduleService';
import {registerCronTask, unregisterCronTasks} from '../scheduler/cronScheduler';
import {getBotInstance} from '../lib/bot';
import {isAdmin} from '../middleware/isAdmin';
import {createTemplate, deleteTemplate, getAllTemplates} from '../services/templateService';
import {config} from '../config';

export function registerCommands(bot: Bot) {
    bot.command('setreminder', handleSetReminder);
    bot.command('myreminders', handleMyReminders);
    bot.command('editreminder', handleEditReminder);
    bot.command('deletereminder', handleDeleteReminder);
    bot.command('help', handleHelp);
    bot.command('whoami', handleWhoami);
    
    bot.command('addreminder', isAdmin, handleAddReminder);
    bot.command('addreward', isAdmin, handleAddReward);
    bot.command('deletemessage', isAdmin, handleDeleteMessage);
    bot.command('listmessages', isAdmin, handleListMessages);
}

async function handleSetReminder(ctx: Context) {
    const telegramId = ctx.from?.id;
    const chatId = ctx.chat?.id;
    const input = ctx.match;

    if (!telegramId || !chatId) {
        return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ —á–∞—Ç–µ');
    }

    if (!input) {
        return ctx.reply(
            '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setreminder 09:00,14:00,21:00\n\n' +
            '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)'
        );
    }

    const times = parseTimes(input.toString());

    if (times.length === 0) {
        return ctx.reply('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –≤—Ä–µ–º—è');
    }

    const validation = validateTimes(times);

    if (!validation.valid) {
        return ctx.reply(
            `‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: ${validation.invalidTimes.join(', ')}\n\n` +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00, 14:30, 21:00)'
        );
    }

    try {
        const user = await ctx.api.getChat(telegramId);

        let dbUser = await ctx.api.getChat(telegramId).then(async () => {
            const {prisma} = await import('../lib/prisma');
            return prisma.user.findUnique({where: {telegramId: BigInt(telegramId)}});
        });

        if (!dbUser) {
            const {prisma} = await import('../lib/prisma');
            dbUser = await prisma.user.create({
                data: {
                    telegramId: BigInt(telegramId),
                    username: ctx.from?.username,
                    firstName: ctx.from?.first_name,
                    lastName: ctx.from?.last_name,
                    chatId: BigInt(chatId),
                },
            });
        }

        const schedule = await createSchedule(dbUser.id, BigInt(chatId), times);

        for (const time of times) {
            registerCronTask(getBotInstance(), schedule.id, dbUser.id, BigInt(chatId), time);
        }

        await ctx.reply(
            `‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n` +
            `‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${formatTimes(times)}\n\n` +
            `–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–µ —Ç–∞–±–ª–µ—Ç–æ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.`
        );
    } catch (error) {
        if (error instanceof Error && error.message.includes('—É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')) {
            return ctx.reply(
                '‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.\n\n' +
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /editreminder –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ /deletereminder –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.'
            );
        }
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    }
}

async function handleMyReminders(ctx: Context) {
    const telegramId = ctx.from?.id;
    const chatId = ctx.chat?.id;

    if (!telegramId || !chatId) {
        return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
    }

    try {
        const {prisma} = await import('../lib/prisma');
        const user = await prisma.user.findUnique({where: {telegramId: BigInt(telegramId)}});

        if (!user) {
            return ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setreminder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
        }

        const schedule = await getActiveSchedule(user.id, BigInt(chatId));

        if (!schedule) {
            return ctx.reply(
                'üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.\n\n' +
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setreminder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'
            );
        }

        await ctx.reply(
            `üìã –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n` +
            `‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${formatTimes(schedule.times)}\n` +
            `üìÖ –°–æ–∑–¥–∞–Ω–æ: ${schedule.createdAt.toLocaleString('ru-RU')}`
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    }
}

async function handleEditReminder(ctx: Context) {
    const telegramId = ctx.from?.id;
    const chatId = ctx.chat?.id;
    const input = ctx.match;

    if (!telegramId || !chatId) {
        return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
    }

    if (!input) {
        return ctx.reply(
            '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /editreminder 10:00,15:00,20:00\n\n' +
            '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'
        );
    }

    const times = parseTimes(input.toString());
    const validation = validateTimes(times);

    if (!validation.valid) {
        return ctx.reply(
            `‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: ${validation.invalidTimes.join(', ')}\n\n` +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM'
        );
    }

    try {
        const {prisma} = await import('../lib/prisma');
        const user = await prisma.user.findUnique({where: {telegramId: BigInt(telegramId)}});

        if (!user) {
            return ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setreminder');
        }

        const schedule = await getActiveSchedule(user.id, BigInt(chatId));

        if (!schedule) {
            return ctx.reply(
                '‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n\n' +
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setreminder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è'
            );
        }

        unregisterCronTasks(schedule.id);

        await updateSchedule(schedule.id, times);

        for (const time of times) {
            registerCronTask(getBotInstance(), schedule.id, user.id, BigInt(chatId), time);
        }

        await ctx.reply(
            `‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n` +
            `‚è∞ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${formatTimes(times)}`
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    }
}

async function handleDeleteReminder(ctx: Context) {
    const telegramId = ctx.from?.id;
    const chatId = ctx.chat?.id;

    if (!telegramId || !chatId) {
        return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
    }

    try {
        const {prisma} = await import('../lib/prisma');
        const user = await prisma.user.findUnique({where: {telegramId: BigInt(telegramId)}});

        if (!user) {
            return ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
        }

        const schedule = await getActiveSchedule(user.id, BigInt(chatId));

        if (!schedule) {
            return ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        }

        unregisterCronTasks(schedule.id);
        await deleteSchedule(schedule.id);

        await ctx.reply('‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    }
}

async function handleHelp(ctx: Context) {
    const telegramId = ctx.from?.id;
    const isAdminUser = telegramId && config.adminTelegramId && BigInt(telegramId) === config.adminTelegramId;

    let helpText = 'üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
        'üîπ /setreminder <–≤—Ä–µ–º—è> - –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n' +
        '   –ü—Ä–∏–º–µ—Ä: /setreminder 09:00,14:00,21:00\n\n' +
        'üîπ /myreminders - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n' +
        'üîπ /editreminder <–≤—Ä–µ–º—è> - –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n' +
        '   –ü—Ä–∏–º–µ—Ä: /editreminder 10:00,16:00\n\n' +
        'üîπ /deletereminder - –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n' +
        'üîπ /whoami - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –∏ ID\n\n' +
        'üîπ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n' +
        'üí° –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: HH:MM (24-—á–∞—Å–æ–≤–æ–π)\n' +
        'üí° –ù–µ—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é';

    if (isAdminUser) {
        helpText += '\n\n' +
            'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
            'üî∏ /addreminder <—Ç–µ–∫—Å—Ç> - –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n' +
            '   –ü—Ä–∏–º–µ—Ä: /addreminder –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏!\n\n' +
            'üî∏ /addreward <—Ç–µ–∫—Å—Ç> - –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –Ω–∞–≥—Ä–∞–¥—ã\n' +
            '   –ü—Ä–∏–º–µ—Ä: /addreward –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!\n\n' +
            'üî∏ /deletemessage <id> - –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ ID\n' +
            '   –ü—Ä–∏–º–µ—Ä: /deletemessage abc-123-def\n\n' +
            'üî∏ /listmessages [type] - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã\n' +
            '   –ü—Ä–∏–º–µ—Ä: /listmessages reminder';
    }

    await ctx.reply(helpText);
}

async function handleAddReminder(ctx: Context) {
    const input = ctx.match;

    if (!input || input.toString().trim().length === 0) {
        return ctx.reply(
            '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addreminder <—Ç–µ–∫—Å—Ç>\n\n' +
            '–ü—Ä–∏–º–µ—Ä: /addreminder –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏!'
        );
    }

    try {
        const template = await createTemplate('reminder', input.toString());
        await ctx.reply(
            `‚úÖ –®–∞–±–ª–æ–Ω –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω!\n\n` +
            `üÜî ID: ${template.id}\n` +
            `üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${template.content}`
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
        const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`);
    }
}

async function handleAddReward(ctx: Context) {
    const input = ctx.match;

    if (!input || input.toString().trim().length === 0) {
        return ctx.reply(
            '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addreward <—Ç–µ–∫—Å—Ç>\n\n' +
            '–ü—Ä–∏–º–µ—Ä: /addreward –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!'
        );
    }

    try {
        const template = await createTemplate('reward', input.toString());
        await ctx.reply(
            `‚úÖ –®–∞–±–ª–æ–Ω –Ω–∞–≥—Ä–∞–¥—ã —Å–æ–∑–¥–∞–Ω!\n\n` +
            `üÜî ID: ${template.id}\n` +
            `üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${template.content}`
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã:', error);
        const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`);
    }
}

async function handleDeleteMessage(ctx: Context) {
    const input = ctx.match;

    if (!input || input.toString().trim().length === 0) {
        return ctx.reply(
            '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deletemessage <id>\n\n' +
            '–ü—Ä–∏–º–µ—Ä: /deletemessage abc-123-def\n\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /listmessages –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ID —à–∞–±–ª–æ–Ω–æ–≤'
        );
    }

    try {
        const template = await deleteTemplate(input.toString().trim());
        await ctx.reply(
            `‚úÖ –®–∞–±–ª–æ–Ω —É–¥–∞–ª–µ–Ω!\n\n` +
            `üÜî ID: ${template.id}\n` +
            `üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${template.content}`
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞:', error);
        const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`);
    }
}

async function handleListMessages(ctx: Context) {
    const input = ctx.match?.toString().trim();
    let type: 'reminder' | 'reward' | undefined;

    if (input === 'reminder' || input === 'reward') {
        type = input;
    }

    try {
        const templates = await getAllTemplates(type);

        if (templates.length === 0) {
            return ctx.reply('üì≠ –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }

        const reminderTemplates = templates.filter(t => t.type === 'reminder');
        const rewardTemplates = templates.filter(t => t.type === 'reward');

        let message = 'üìã –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤:\n\n';

        if (reminderTemplates.length > 0) {
            message += '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n';
            reminderTemplates.forEach((t, index) => {
                const status = t.isActive ? '‚úÖ' : '‚ùå';
                const preview = t.content.length > 50 ? t.content.substring(0, 50) + '...' : t.content;
                message += `${index + 1}. ${status} ${preview}\n`;
                message += `   üÜî ${t.id}\n\n`;
            });
        }

        if (rewardTemplates.length > 0) {
            message += 'üéÅ –ù–∞–≥—Ä–∞–¥—ã:\n';
            rewardTemplates.forEach((t, index) => {
                const status = t.isActive ? '‚úÖ' : '‚ùå';
                const preview = t.content.length > 50 ? t.content.substring(0, 50) + '...' : t.content;
                message += `${index + 1}. ${status} ${preview}\n`;
                message += `   üÜî ${t.id}\n\n`;
            });
        }

        message += `\nüìä –í—Å–µ–≥–æ: ${templates.length} —à–∞–±–ª–æ–Ω–æ–≤`;

        await ctx.reply(message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤');
    }
}

async function handleWhoami(ctx: Context) {
    const telegramId = ctx.from?.id;

    if (!telegramId) {
        return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
    }

    let message = `üë§ –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n`;
    message += `üÜî Telegram ID: ${telegramId}\n\n`;

    if (!config.adminTelegramId) {
        message += '‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n';
        message += 'ADMIN_TELEGRAM_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏';
    } else if (BigInt(telegramId) === config.adminTelegramId) {
        message += 'üëë –°—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n';
        message += '–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º:\n';
        message += '‚Ä¢ /addreminder - –¥–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n';
        message += '‚Ä¢ /addreward - –¥–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –Ω–∞–≥—Ä–∞–¥—ã\n';
        message += '‚Ä¢ /deletemessage - —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω\n';
        message += '‚Ä¢ /listmessages - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã';
    } else {
        message += 'üë§ –°—Ç–∞—Ç—É—Å: –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n\n';
        message += '–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.\n';
        message += '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.';
    }

    await ctx.reply(message);
}
