import { Bot, Context } from 'grammy';
import { confirmReminder, getReminder } from '../services/reminderService';
import { getRandomTemplate } from '../services/templateService';
import { cancelRetry } from '../scheduler/cronScheduler';
import { getSession, updateSession, deleteSession } from '../services/quizSessionManager';
import { MyContext } from '../types/context';

export function registerCallbacks(bot: Bot<MyContext>) {
  bot.callbackQuery(/^confirm_reminder:(.+)$/, handleConfirmReminder);
  bot.callbackQuery(/^qa:(.+):(.+)$/, handleQuizAnswer);
}
async function handleConfirmReminder(ctx: Context) {
  const match = ctx.callbackQuery?.data?.match(/^confirm_reminder:(.+)$/);
  
  if (!match) {
    return ctx.answerCallbackQuery({ text: '–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
  }

  const reminderId = match[1];
  const userId = ctx.from?.id;

  if (!userId) {
    return ctx.answerCallbackQuery({ text: '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à ID' });
  }

  try {
    const reminder = await getReminder(reminderId);

    if (!reminder) {
      return ctx.answerCallbackQuery({ text: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    if (reminder.status === 'confirmed') {
      return ctx.answerCallbackQuery({ text: '–í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' });
    }

    if (BigInt(userId) !== reminder.schedule.user.telegramId) {
      return ctx.answerCallbackQuery({ 
        text: '–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å',
        show_alert: true 
      });
    }

    await confirmReminder(reminderId);
    cancelRetry(reminderId);

    await ctx.answerCallbackQuery({ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!' });

    const rewardMessage = await getRandomTemplate('reward');
    
    try {
      await ctx.deleteMessage();
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', error);
      try {
        await ctx.editMessageText('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!');
        await ctx.editMessageReplyMarkup({ reply_markup: { inline_keyboard: [] } });
      } catch (editError) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', editError);
      }
    }
    
    await ctx.reply(rewardMessage);

    console.log(`‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminderId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
    await ctx.answerCallbackQuery({ text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
  }
}

async function handleQuizAnswer(ctx: Context) {
  const match = ctx.callbackQuery?.data?.match(/^qa:(.+):(.+)$/);
  
  if (!match) {
    return ctx.answerCallbackQuery({ text: '–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
  }

  const sessionKey = match[1];
  const optionIndex = parseInt(match[2]);
  const userId = ctx.from?.id;

  if (!userId) {
    return ctx.answerCallbackQuery({ text: '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à ID' });
  }

  const [sessionUserId, sessionChatId] = sessionKey.split('_');
  
  if (BigInt(userId) !== BigInt(sessionUserId)) {
    return ctx.answerCallbackQuery({ 
      text: '–≠—Ç–æ –Ω–µ –≤–∞—à –∫–≤–∏–∑',
      show_alert: true 
    });
  }

  const session = getSession(BigInt(sessionUserId), BigInt(sessionChatId));

  if (!session) {
    return ctx.answerCallbackQuery({ text: '–°–µ—Å—Å–∏—è –∫–≤–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }

  const currentQuestion = session.questions[session.currentIndex];
  const selectedOption = currentQuestion.options[optionIndex];

  if (!selectedOption) {
    return ctx.answerCallbackQuery({ text: '–û—à–∏–±–∫–∞: –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }

  const isCorrect = selectedOption.isCorrect;
  const correctOption = currentQuestion.options.find(opt => opt.isCorrect);

  try {
    await ctx.editMessageReplyMarkup({ reply_markup: { inline_keyboard: [] } });
  } catch (error) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏:', error);
  }

  if (isCorrect) {
    updateSession(BigInt(sessionUserId), BigInt(sessionChatId), {
      correctCount: session.correctCount + 1,
    });
    await ctx.answerCallbackQuery({ text: '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!' });
    await ctx.reply('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!');
  } else {
    updateSession(BigInt(sessionUserId), BigInt(sessionChatId), {
      incorrectCount: session.incorrectCount + 1,
    });
    await ctx.answerCallbackQuery({ text: '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ' });
    await ctx.reply(`‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correctOption?.text}`);
  }

  const updatedSession = getSession(BigInt(sessionUserId), BigInt(sessionChatId));

  if (!updatedSession) {
    return;
  }

  if (updatedSession.currentIndex + 1 < updatedSession.questions.length) {
    updateSession(BigInt(sessionUserId), BigInt(sessionChatId), {
      currentIndex: updatedSession.currentIndex + 1,
    });

    await sendNextQuestion(ctx, BigInt(sessionUserId), BigInt(sessionChatId));
  } else {
    await showFinalStatistics(ctx, updatedSession);
    deleteSession(BigInt(sessionUserId), BigInt(sessionChatId));
  }
}

async function sendNextQuestion(ctx: Context, userId: bigint, chatId: bigint) {
  const session = getSession(userId, chatId);

  if (!session) {
    return;
  }

  const question = session.questions[session.currentIndex];
  const questionNumber = session.currentIndex + 1;
  const totalQuestions = session.questions.length;

  const keyboard = {
    inline_keyboard: question.options.map((opt, index) => [{
      text: opt.text,
      callback_data: `qa:${userId}_${chatId}:${index}`,
    }]),
  };

  await ctx.reply(
    `üìù –í–æ–ø—Ä–æ—Å ${questionNumber}/${totalQuestions}\n\n` +
    `${question.questionText}`,
    {reply_markup: keyboard}
  );
}

async function showFinalStatistics(ctx: Context, session: {
  quizName: string;
  questions: unknown[];
  correctCount: number;
  incorrectCount: number;
}) {
  const totalQuestions = session.questions.length;
  const percentage = Math.round((session.correctCount / totalQuestions) * 100);

  let message = 'üéâ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n';
  message += `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∏–∑–∞ "${session.quizName}":\n\n`;
  message += `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${session.correctCount}\n`;
  message += `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: ${session.incorrectCount}\n`;
  message += `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${percentage}%\n\n`;

  if (percentage === 100) {
    message += 'üèÜ –ò–¥–µ–∞–ª—å–Ω–æ! –í—Å–µ –æ—Ç–≤–µ—Ç—ã –≤–µ—Ä–Ω—ã!';
  } else if (percentage >= 80) {
    message += 'üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!';
  } else if (percentage >= 60) {
    message += 'üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!';
  } else if (percentage >= 40) {
    message += 'üí™ –ù–µ–ø–ª–æ—Ö–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!';
  } else {
    message += 'üìö –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!';
  }

  await ctx.reply(message);
}
