import {type Conversation} from '@grammyjs/conversations';
import {createQuiz} from '../services/quizService';
import {MyContext} from '../types/context';

export async function createQuizConversation(conversation: Conversation<MyContext, MyContext>, ctx: MyContext) {
  const initialMsg = await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel');

  const nameCtx = await conversation.waitFor('message:text');
  
  try {
    await ctx.api.deleteMessage(ctx.chat!.id, nameCtx.message!.message_id);
  } catch (error) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', error);
  }
  
  if (nameCtx.message?.text === '/cancel') {
    await ctx.api.editMessageText(
      ctx.chat!.id,
      initialMsg.message_id,
      '‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–∏–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ'
    );
    return;
  }

  const name = nameCtx.message?.text;
  if (!name) {
    await ctx.api.editMessageText(
      ctx.chat!.id,
      initialMsg.message_id,
      '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ'
    );
    return;
  }

  await ctx.api.editMessageText(
    ctx.chat!.id,
    initialMsg.message_id,
    `üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∏–∑–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)\n\n` +
    `–ù–∞–∑–≤–∞–Ω–∏–µ: ${name}`
  );

  const descCtx = await conversation.waitFor('message:text');
  
  try {
    await ctx.api.deleteMessage(ctx.chat!.id, descCtx.message!.message_id);
  } catch (error) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', error);
  }
  
  if (descCtx.message?.text === '/cancel') {
    await ctx.api.editMessageText(
      ctx.chat!.id,
      initialMsg.message_id,
      '‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–≤–∏–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ'
    );
    return;
  }

  const description = descCtx.message?.text;
  const finalDescription = description === '-' ? undefined : description;

  try {
    const quiz = await createQuiz(name, finalDescription);
    await ctx.api.editMessageText(
      ctx.chat!.id,
      initialMsg.message_id,
      `‚úÖ –ö–≤–∏–∑ '${quiz.name}' —Å–æ–∑–¥–∞–Ω!\n\n` +
      `–î–æ–±–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é /addquestion ${quiz.name}`
    );
    
    await ctx.api.editMessageReplyMarkup(
      ctx.chat!.id,
      initialMsg.message_id,
      {
        reply_markup: {
          inline_keyboard: [
            [{text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: `add_question:${quiz.name}`}],
          ],
        },
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–∏–∑–∞:', error);
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    await ctx.api.editMessageText(
      ctx.chat!.id,
      initialMsg.message_id,
      `‚ùå ${errorMessage}`
    );
  }
}
