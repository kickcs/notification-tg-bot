import {type Conversation} from '@grammyjs/conversations';
import {createQuestion, getAllQuizzes} from '../services/quizService';
import {MyContext} from '../types/context';

export async function addQuestionConversation(conversation: Conversation<MyContext, MyContext>, ctx: MyContext) {
  const quizName = await conversation.external((ctx) => ctx.session?.quizName);

  if (!quizName) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ');
    return;
  }
  
  await conversation.external((ctx) => {
    if (ctx.session) {
      delete ctx.session.quizName;
    }
  });

  const quizzes = await getAllQuizzes(true);
  const foundQuiz = quizzes.find((q: {name: string}) => q.name === quizName);

  if (!foundQuiz) {
    await ctx.reply(`‚ùå –ö–≤–∏–∑ '${quizName}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return;
  }

  const initialMsg = await ctx.reply(`üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –∫–≤–∏–∑–∞ '${quizName}'\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel`);

  const questionCtx = await conversation.waitFor('message:text');
  
  try {
    await ctx.api.deleteMessage(ctx.chat!.id, questionCtx.message!.message_id);
  } catch (error) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', error);
  }
  
  if (questionCtx.message?.text === '/cancel') {
    await ctx.api.editMessageText(
      ctx.chat!.id,
      initialMsg.message_id,
      '‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ'
    );
    return;
  }

  const questionText = questionCtx.message?.text;
  if (!questionText) {
    await ctx.api.editMessageText(
      ctx.chat!.id,
      initialMsg.message_id,
      '‚ùå –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω'
    );
    return;
  }

  const options: string[] = [];
  
  for (let i = 1; i <= 4; i++) {
    await ctx.api.editMessageText(
      ctx.chat!.id,
      initialMsg.message_id,
      `üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ ${i} (–≤—Å–µ–≥–æ –Ω—É–∂–Ω–æ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞)\n\n` +
      `–í–æ–ø—Ä–æ—Å: ${questionText}`
    );
    
    const optionCtx = await conversation.waitFor('message:text');
    
    try {
      await ctx.api.deleteMessage(ctx.chat!.id, optionCtx.message!.message_id);
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', error);
    }
    
    if (optionCtx.message?.text === '/cancel') {
      await ctx.api.editMessageText(
        ctx.chat!.id,
        initialMsg.message_id,
        '‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ'
      );
      return;
    }

    const optionText = optionCtx.message?.text;
    if (!optionText) {
      await ctx.api.editMessageText(
        ctx.chat!.id,
        initialMsg.message_id,
        '‚ùå –í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω'
      );
      return;
    }

    options.push(optionText);
  }

  let message = 'üìã –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n\n';
  options.forEach((opt, i) => {
    message += `${i + 1}. ${opt}\n`;
  });
  message += '\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (1-4)';

  await ctx.api.editMessageText(
    ctx.chat!.id,
    initialMsg.message_id,
    message
  );

  let correctIndex: number | null = null;

  while (correctIndex === null) {
    const correctCtx = await conversation.waitFor('message:text');
    
    try {
      await ctx.api.deleteMessage(ctx.chat!.id, correctCtx.message!.message_id);
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', error);
    }
    
    if (correctCtx.message?.text === '/cancel') {
      await ctx.api.editMessageText(
        ctx.chat!.id,
        initialMsg.message_id,
        '‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ'
      );
      return;
    }

    const input = correctCtx.message?.text;
    if (!input) {
      await ctx.api.editMessageText(
        ctx.chat!.id,
        initialMsg.message_id,
        message + '\n\n‚ùå –ù–æ–º–µ—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:'
      );
      continue;
    }

    const parsed = parseInt(input);
    
    if (isNaN(parsed) || parsed < 1 || parsed > 4) {
      await ctx.api.editMessageText(
        ctx.chat!.id,
        initialMsg.message_id,
        message + '\n\n‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4:'
      );
      continue;
    }

    correctIndex = parsed;
  }

  try {
    const optionsData = options.map((opt, i) => ({
      text: opt,
      isCorrect: i === correctIndex - 1,
    }));

    const {question, totalQuestions} = await createQuestion(
      quizName,
      questionText,
      optionsData
    );

    await ctx.api.editMessageText(
      ctx.chat!.id,
      initialMsg.message_id,
      `‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–≤–∏–∑ '${quizName}'!\n\n` +
      `üìä –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${totalQuestions}`
    );
    
    await ctx.api.editMessageReplyMarkup(
      ctx.chat!.id,
      initialMsg.message_id,
      {
        reply_markup: {
          inline_keyboard: [
            [{text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å', callback_data: `add_question:${quizName}`}],
            [{text: 'üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤', callback_data: `list_questions:${quizName}`}],
            [{text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ', callback_data: `finish_adding:${quizName}`}],
          ],
        },
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞:', error);
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    await ctx.api.editMessageText(
      ctx.chat!.id,
      initialMsg.message_id,
      `‚ùå ${errorMessage}`
    );
  }
}
